"""
–¢–µ—Å—Ç Azure —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /azure/pronunciation-assessment
"""

import httpx
import asyncio
import json
import base64


from pathlib import Path


BASE_URL = "http://85.198.82.170:12500"


def load_example_audio():
    # –ü—É—Ç—å –∫ example.mp3 –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
    audio_path = Path(__file__).parent / "records/example.wav"
    print(audio_path)

    if audio_path.exists():
        with open(audio_path, "rb") as f:
            audio_bytes = f.read()
        return base64.b64encode(audio_bytes).decode('utf-8')
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {audio_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return create_test_audio_data()


def create_test_audio_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö WAV –¥–∞–Ω–Ω—ã—Ö."""
    import struct
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ
    sample_rate = 16000
    duration = 1  # 1 —Å–µ–∫—É–Ω–¥–∞
    num_samples = sample_rate * duration
    
    # WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
    wav_header = b'RIFF'
    wav_header += struct.pack('<I', 36 + num_samples * 2)  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 8
    wav_header += b'WAVE'
    wav_header += b'fmt '
    wav_header += struct.pack('<I', 16)  # –†–∞–∑–º–µ—Ä fmt chunk
    wav_header += struct.pack('<H', 1)   # –§–æ—Ä–º–∞—Ç PCM
    wav_header += struct.pack('<H', 1)   # –ú–æ–Ω–æ
    wav_header += struct.pack('<I', sample_rate)  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    wav_header += struct.pack('<I', sample_rate * 2)  # –ë–∞–π—Ç –≤ —Å–µ–∫—É–Ω–¥—É
    wav_header += struct.pack('<H', 2)   # –ë–ª–æ–∫ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    wav_header += struct.pack('<H', 16)  # –ë–∏—Ç –Ω–∞ —Å—ç–º–ø–ª
    wav_header += b'data'
    wav_header += struct.pack('<I', num_samples * 2)  # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (—Ç–æ–Ω 440 –ì—Ü)
    import math
    audio_data = b''
    for i in range(num_samples):
        sample = int(16000 * math.sin(2 * math.pi * 440 * i / sample_rate))
        audio_data += struct.pack('<h', sample)
    
    complete_wav = wav_header + audio_data
    return base64.b64encode(complete_wav).decode('utf-8')


async def test_pronunciation_endpoint():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/v1/azure/pronunciation-assessment")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞—É–¥–∏–æ
    test_data = {
        "audio_data": load_example_audio(),
        "reference_text": "jmenuji se",
        "language": "cs-CZ"
    }
    
    print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —á–µ—à—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º: '{test_data['reference_text']}'")
    print(f"üåç –Ø–∑—ã–∫: {test_data['language']}")
    print(f"üìä –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö: {len(test_data['audio_data'])} —Å–∏–º–≤–æ–ª–æ–≤ base64")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
    import base64
    try:
        audio_bytes = base64.b64decode(test_data['audio_data'])
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {len(audio_bytes)} –±–∞–π—Ç")
        print(f"üìä –ü–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç: {audio_bytes[:20]}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if audio_bytes[:4] == b'RIFF' and audio_bytes[8:12] == b'WAVE':
            print("‚úÖ –í–∞–ª–∏–¥–Ω—ã–π WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {e}")
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                f"{BASE_URL}/api/v1/azure/pronunciation-assessment",
                json=test_data
            )
            
            print(f"Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                print(json.dumps(data, indent=2, ensure_ascii=False))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                required_fields = ["status", "recognized_text", "reference_text", "scores", "words_analysis"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                else:
                    print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                if data.get("status") == "success":
                    print("‚úÖ –°—Ç–∞—Ç—É—Å: success")
                else:
                    print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {data.get('status')}")
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ scores
                scores = data.get("scores", {})
                if scores:
                    score_fields = ["pronunciation_score", "accuracy_score", "fluency_score", "completeness_score"]
                    missing_score_fields = [field for field in score_fields if field not in scores]
                    
                    if missing_score_fields:
                        print(f"‚ö†Ô∏è –í scores –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_score_fields}")
                    else:
                        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ scores –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                        print(f"Pronunciation Score: {scores.get('pronunciation_score')}")
                        
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ words_analysis
                words_analysis = data.get("words_analysis", [])
                if isinstance(words_analysis, list):
                    print(f"‚úÖ Words analysis —Å–æ–¥–µ—Ä–∂–∏—Ç {len(words_analysis)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                else:
                    print("‚ö†Ô∏è Words analysis –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
                    
            elif response.status_code == 400:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö):")
                print(f"Response: {response.text}")
            elif response.status_code == 500:
                print("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:")
                print(f"Response: {response.text}")
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code}")
                print(f"Response: {response.text}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {str(e)}")


if __name__ == "__main__":
    print("=" * 60)
    print("–¢–ï–°–¢ AZURE PRONUNCIATION –≠–ù–î–ü–û–ò–ù–¢–ê")
    print("=" * 60)
    
    asyncio.run(test_pronunciation_endpoint())
